#!/usr/bin/ruby
# This is auto-generated code, changes will be overwritten.
# Copyright:: Copyright 2011, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License,Version 2.0 (the "License").
#
# Code generated by AdsCommon library 0.3.0 on 2011-06-09 13:32:21.

module DfpApi; module V201101; module ReportService
  class ReportServiceRegistry
    REPORTSERVICE_METHODS = {:run_report_job=>{:output=>{:fields=>[{:type=>"ReportJob", :min_occurs=>0, :name=>:rval, :max_occurs=>1}], :name=>"run_report_job_response"}, :input=>[{:type=>"ReportJob", :min_occurs=>0, :name=>:report_job, :max_occurs=>1}]}, :get_report_download_url=>{:output=>{:fields=>[{:type=>"string", :min_occurs=>0, :name=>:rval, :max_occurs=>1}], :name=>"get_report_download_url_response"}, :input=>[{:type=>"long", :min_occurs=>0, :name=>:report_job_id, :max_occurs=>1}, {:type=>"ExportFormat", :min_occurs=>0, :name=>:export_format, :max_occurs=>1}], :original_name=>"getReportDownloadURL"}, :get_report_job=>{:output=>{:fields=>[{:type=>"ReportJob", :min_occurs=>0, :name=>:rval, :max_occurs=>1}], :name=>"get_report_job_response"}, :input=>[{:type=>"long", :min_occurs=>0, :name=>:report_job_id, :max_occurs=>1}]}}
    REPORTSERVICE_TYPES = {:SoapRequestHeader=>{:fields=>[{:type=>"string", :min_occurs=>0, :name=>:auth_token, :max_occurs=>1}, {:type=>"string", :min_occurs=>0, :name=>:network_code, :max_occurs=>1}, {:type=>"string", :min_occurs=>0, :name=>:application_name, :max_occurs=>1}, {:type=>"string", :min_occurs=>0, :name=>:o_auth_token, :max_occurs=>1}]}, :ReportJob=>{:fields=>[{:type=>"long", :min_occurs=>0, :name=>:id, :max_occurs=>1}, {:type=>"ReportQuery", :min_occurs=>0, :name=>:report_query, :max_occurs=>1}, {:type=>"ReportJobStatus", :min_occurs=>0, :name=>:report_job_status, :max_occurs=>1}]}, :DateTime=>{:fields=>[{:type=>"Date", :min_occurs=>0, :name=>:date, :max_occurs=>1}, {:type=>"int", :min_occurs=>0, :name=>:hour, :max_occurs=>1}, {:type=>"int", :min_occurs=>0, :name=>:minute, :max_occurs=>1}, {:type=>"int", :min_occurs=>0, :name=>:second, :max_occurs=>1}, {:type=>"string", :min_occurs=>0, :name=>:time_zone_id, :max_occurs=>1}]}, :SoapResponseHeader=>{:fields=>[{:type=>"string", :min_occurs=>0, :name=>:request_id, :max_occurs=>1}, {:type=>"long", :min_occurs=>0, :name=>:response_time, :max_occurs=>1}]}, :Date=>{:fields=>[{:type=>"int", :min_occurs=>0, :name=>:year, :max_occurs=>1}, {:type=>"int", :min_occurs=>0, :name=>:month, :max_occurs=>1}, {:type=>"int", :min_occurs=>0, :name=>:day, :max_occurs=>1}]}, :ReportQuery=>{:fields=>[{:type=>"Dimension", :min_occurs=>0, :name=>:dimensions, :max_occurs=>nil}, {:type=>"Column", :min_occurs=>0, :name=>:columns, :max_occurs=>nil}, {:type=>"DateTime", :min_occurs=>0, :name=>:start_date_time, :max_occurs=>1}, {:type=>"DateTime", :min_occurs=>0, :name=>:end_date_time, :max_occurs=>1}, {:type=>"DateRangeType", :min_occurs=>0, :name=>:date_range_type, :max_occurs=>1}, {:type=>"DimensionFilter", :min_occurs=>0, :name=>:dimension_filters, :max_occurs=>nil}]}}

    def self.get_method_signature(method_name)
      return REPORTSERVICE_METHODS[method_name.to_sym]
    end

    def self.get_type_signature(type_name)
      return REPORTSERVICE_TYPES[type_name.to_sym]
    end
  end

  # Base class for exceptions.
  class ApplicationException < DfpApi::Errors::ApiException
    attr_reader :message  # string
    attr_reader :application_exception_type  # string
  end

  # Exception class for holding a list of service errors.
  class ApiException < ApplicationException
    attr_reader :errors  # ApiError
    def initialize(exception_fault)
      @array_fields = [] if !defined?(@array_fields)
      @array_fields << 'errors'
      super(exception_fault)
    end
  end
end; end; end
